// JavaScript
class BeforeAfterSlider extends HTMLElement {
  constructor() {
    super();
    // Find elements within the shadow DOM
    this.slider = this.querySelector('.slider');
    this.foregroundImg = this.querySelector('.foreground-img');
    this.sliderButton = this.querySelector('.slider-button');

    // Attach event listeners
    this.slider.addEventListener('input', this.handleSliderInput.bind(this));
    this.slider.addEventListener('change', this.handleSliderChange.bind(this));
    window.addEventListener('resize', this.handleSliderChange.bind(this));
  }

  handleSliderInput(e) {
    const sliderPos = e.target.value;
    // Update the width of the foreground image
    this.foregroundImg.style.width = `${sliderPos}%`;
    // Update the position of the slider button
    if(document.body.clientWidth<=600){
      this.sliderButton.style.left = `calc(${sliderPos}% - 16px)`;
    }
    else{
      this.sliderButton.style.left = `calc(${sliderPos}% - 31px)`;
    }
  }

  handleSliderChange(e) {
    // Handle slider change (if needed)
  }
}

customElements.define('before-after-slider', BeforeAfterSlider);



class BeforeAfterSliderContainer extends HTMLElement {
  constructor() {
    super();
    this.items=this.querySelectorAll('before-after-slider')
    const loadSlides = (event) => {
      let izSelected = false
      this.items.forEach(item => {
        item.removeAttribute('is-active-slide');
        if(item.getAttribute('data-id') == String(event.detail.variant.id)){
          izSelected=true
          item.setAttribute('is-active-slide',true)
        }
        else if (item.getAttribute('data-id')=='default' && !izSelected ){
          item.setAttribute('is-active-slide',true)
        }
      });
    }

    document.addEventListener('shapes:product:variantchange', loadSlides);
  }

  

  handleSliderChange(e) {
    // Handle slider change (if needed)
  }
}

customElements.define('before-after-slider-container', BeforeAfterSliderContainer);

class ImageWithTextOptions extends HTMLElement {
  constructor() {
    super();
    this.items=this.querySelectorAll('.btn-option-item')


    const handleClick = (e) => {
      const elements = document.querySelector(`.variant-input input[name*="__main-options[Color]"][value="${e.target.closest('.btn-option-item').getAttribute('title')}"]`);
      if(elements){
        const event = new Event("change");
        elements.checked = true
        elements.dispatchEvent(event);

        //trigger click
        elements.click();
      }      
    }


    const checkAvailibility = (event) => {
      
      this.items.forEach(color_option => {
        color_option.setAttribute('available-option',false)
        
        const filtred_items = theme.product_options.filter(item => {
          return item.options.some(item => item === event.detail.option)   
        })
        if(filtred_items.length!=0){
          const colors = filtred_items.filter(item => {
            return item.options.some(item => item === color_option.getAttribute('title'))   
          })
          if(colors.length!=0){
            color_option.setAttribute('available-option',true)
          }
        }
      });
    }

    const setActiveOption = (event) => {
      this.querySelector('.current-option-name').innerHTML="Default"
      this.items.forEach(color_option => {
        color_option.setAttribute('checked-option',false)
        const filtred_items = theme.product_options.filter(item => {
          return item.title == event.detail.variant 
        })
        if(filtred_items){
          const colors = filtred_items.filter(item => {
            return item.options.some(item => item === color_option.getAttribute('title'))  
          })
          if(colors.length){
            color_option.setAttribute('checked-option',true)
            
            //set option title
            this.querySelector('.current-option-name').innerHTML=color_option.getAttribute('title')
          }
        }
      });
    }

    const clearAllChecks = (event) => {
      this.items.forEach(color_option => {
        color_option.setAttribute('available-option',false)
      })
    }

    this.items.forEach(function(element) {
      element.addEventListener('click', handleClick);
    });

    window.addEventListener('shapes:product:variantactive', setActiveOption);
    window.addEventListener('shapes:product:variantavailibility', checkAvailibility);
    window.addEventListener('shapes:product:clearAllchecks', clearAllChecks);
  }

}


customElements.define('image-with-text-options', ImageWithTextOptions);

class ScrollContainer extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    const container = this.querySelector(".inner_container_items");
    const leftButton = this.querySelector(".left-button");
    const rightButton = this.querySelector(".right-button");

    // Add a 'slide-directly-edge' attribute and check its value
    const slideDirectlyEdge = this.hasAttribute("slide-directly-edge");

    const updateButtonVisibility = () => {
      // Show/hide the left button based on scroll position
      if (container.scrollLeft > 0 && leftButton) {
        leftButton.style.visibility = "visible";
      } else if (leftButton) {
        leftButton.style.visibility = "hidden";
      }
      // Show/hide the right button based on scroll position
      if (
        container.scrollLeft <
          container.scrollWidth - container.clientWidth - 10 &&
        rightButton
      ) {
        rightButton.style.visibility = "visible";
      } else if (rightButton) {
        rightButton.style.visibility = "hidden";
      }
    };

    const scrollHandler = () => {
      updateButtonVisibility();
    };

    const resizeHandler = () => {
      updateButtonVisibility();
    };

    leftButton?.addEventListener("click", () => {
      if (slideDirectlyEdge) {
        container.scrollLeft = 0; // Scroll to the left edge
      } else {
        container.scrollLeft -= 300; // Normal scrolling
      }
    });

    rightButton?.addEventListener("click", () => {
      if (slideDirectlyEdge) {
        container.scrollLeft = container.scrollWidth - container.clientWidth; // Scroll to the right edge
      } else {
        container.scrollLeft += 300; // Normal scrolling
      }
    });

    container?.addEventListener("scroll", scrollHandler);
    window.addEventListener("resize", resizeHandler);

    updateButtonVisibility(); // Trigger initial visibility check

    // Add an event listener for the refresh scroll
    this.addEventListener("slider-scroll:refresh", updateButtonVisibility);
  }
}

customElements.define("scroll-wrapper-slider", ScrollContainer);


class ProductBundler extends HTMLElement {
  constructor() {
    super();

    this.tabItem = this.querySelectorAll("[js-tab-item]");
    this.tabPanels = this.querySelectorAll("[js-tab-panel]");
    this.starterSetItems = this.querySelectorAll("[js-starter-set-item]");
    this.starterSetSize = this.getAttribute('data-starter-set-size');
    this.starterSetAmount = this.getAttribute('data-starter-set-off-price');
    this.dataAddToBundle = this.querySelector('[data-add-to-bundle]');
    this.dataAddToBundleText = this.querySelector('[data-add-to-bundle-text]');
    this.selectedGift = null
    this.productSelected=0
    this.lineItems = {
      items: []
    };
    this.cartAmount=0;
    this.currentStep=1;

    this.starterSetItems.forEach((element)=> {
      element.querySelector('.current-details .set-action').addEventListener('click', (e)=>{
        const index = e.target.closest('.set-item').getAttribute('data-set-index')
        const product_id = e.target.closest('.set-item').getAttribute('js-starter-set-item')
        this.starterSetItems.forEach((lineItem)=> {
          if(lineItem.getAttribute('js-starter-set-item') === product_id && lineItem.getAttribute('data-set-index') == index){
            //remove product class
            lineItem.classList.remove('selected')
            lineItem.setAttribute('js-starter-set-item',"")
            this.minusFromCartValuesAndRedirect(product_id,parseInt(index)==-1,index)
          }
        });
      });
    });

    this.dataAddToBundle.addEventListener('click', (e)=>{
      this.addProductToTheCart()
    })

    this.init();
  }

  connectedCallback() {
  }
  
  init(){
    this.addEventListener('bundle:addToSet', this.addToSet);
  }

  formatMoney(price) {
    return formatMoney(price, theme.moneyFormat);
  }

  addProductToTheCart(){
        liveRegion(window.theme.strings.loading);
        this.dataAddToBundleText.textContent=this.dataAddToBundleText.textContent.replace('ADD TO CART','LOADING')
        const formData = new FormData();
        const formDataGift = new FormData();
        let modalCart = theme.settings.cart_type === 'modal';
        const config = fetchConfigDefaults('javascript');
        const configGift = fetchConfigDefaults('javascript');
  
        if (modalCart) {
          formData.append('sections', 'cart-items,cart-footer,cart-item-count');
          formData.append('sections_url', window.location.pathname);
          formDataGift.append('sections', 'cart-items,cart-footer,cart-item-count');
          formDataGift.append('sections_url', window.location.pathname);
        }

        this.starterSetItems.forEach((item, index) => {
          if(item.getAttribute('data-set-index')!="-1"){
            formData.append(`items[${index}][id]`, parseInt(item.getAttribute('js-starter-set-item')));
            formData.append(`items[${index}][quantity]`, 1);
          }
          else{
            formDataGift.append(`items[${index}][id]`, parseInt(item.getAttribute('js-starter-set-item')));
            formDataGift.append(`items[${index}][quantity]`, 1);
          }
        });
  
        config.body = formData;
        config.headers['X-Requested-With'] = 'XMLHttpRequest';
        delete config.headers['Content-Type'];

        configGift.body = formDataGift;
        configGift.headers['X-Requested-With'] = 'XMLHttpRequest';
        delete configGift.headers['Content-Type'];
        
  
        fetch(`${theme.routes.cart_add_url}`, config)
          .then(data => {
            // Process the data from the first fetch
            console.log('Data from the first fetch:', data);
        
            // Second fetch request
            return fetch(`${theme.routes.cart_add_url}`, configGift);
          })
          .then((res) => res.json())
          .then((data) => {
            if (modalCart) {
              document.body.dispatchEvent(
                new CustomEvent('shapes:modalcart:afteradditem', {
                  bubbles: true,
                  detail: { response: data },
                })
              );
            }
            this.tabItem[2].classList.remove('disabled')
            this.tabItem[2].classList.add('active')
  
            if (!document.querySelector('[data-show-on-add="true"]')) {
              if (this.$refs.added)
                this.$nextTick(() => this.$refs.added.focus());
            }
          })
          .catch((error) => {
            error.json().then((a) => {
              alert(a.description);
            });
          }).finally(()=>{
            this.dataAddToBundleText.textContent=this.dataAddToBundleText.textContent.replace('LOADING','ADD TO CART')
          });
  }

  updateLineItem(lineItem,variant,isGift){
    //update image
    lineItem.querySelector('.product-image img').src= variant.featured_image.src
    //update details
    lineItem.querySelector('.current-details .set-title').textContent= variant.name.replace(` - ${variant.title}`,'')
    lineItem.querySelector('.current-details .set-options').textContent= variant.title
    if(!isGift){
      lineItem.querySelector('.current-details .set-price').textContent= formatMoney(variant.price)
    }
    else{
      lineItem.querySelector('.current-details .set-price').textContent= formatMoney(variant.price-(variant.price/parseInt(this.starterSetAmount)))
    }
  }

  updateCartValues(variant,isGift){
    if(!isGift){
      this.cartAmount+=variant.price
    }
    else if(isGift){
      this.cartAmount+=variant.price-(variant.price/this.starterSetAmount)
    }

    this.dataAddToBundleText.textContent=`ADD TO CART - ${formatMoney(this.cartAmount)}`

    //change the state of add to cart button
    if(this.cartReadyToSet()){
      this.dataAddToBundle.removeAttribute('disabled')

      //check the third part
      this.tabItem[2].classList.remove('disabled')
      this.tabItem[2].classList.add('active')
      
    }
    else{
      this.dataAddToBundle.setAttribute('disabled',true)
    }
  }


  minusFromCartValuesAndRedirect(variant,isGift,index){
    const currentProduct = this.lineItems.items.find(item => item.id === parseInt(variant));
    const indexToDelete = this.lineItems.items.findIndex(item => item.id === parseInt(variant));

    if (indexToDelete !== -1) {
      this.lineItems.items.splice(indexToDelete, 1);
    }
    if(!isGift){
      this.cartAmount=this.cartAmount-currentProduct.price
      //remove current products
      this.productSelected--;
      //redirect now to the first tab
      this.tabPanels.forEach(tab=>{
        if(tab.getAttribute('js-tab-panel')==='list-products'){
          tab.classList.add('active-panel')
        }
        else if(tab.getAttribute('js-tab-panel')==='list-gifts'){
          tab.classList.remove('active-panel')
        }
      })
      //remove active from the second tab
      this.tabItem[1].classList.add('disabled')
      this.tabItem[1].classList.remove('active')

      this.tabItem[2].classList.add('disabled')
      this.tabItem[2].classList.remove('active')
      this.scrollIntoView({ behavior: 'smooth' });
    }
    else if(isGift){
      //remove current products
      this.tabItem[2].classList.add('disabled')
      this.tabItem[2].classList.remove('active')
      this.cartAmount=this.cartAmount-currentProduct.price+(currentProduct.price/parseInt(this.starterSetAmount))
    }
    this.dataAddToBundleText.textContent=`ADD TO CART - ${formatMoney(this.cartAmount)}`

    //change the state of add to cart button
    this.dataAddToBundle.setAttribute('disabled',true)
  }

  cartReadyToSet(){
    let status=true
    for (let lineItem of this.starterSetItems) {
      if(lineItem.getAttribute('js-starter-set-item') === "" ){
        status=false
      }
    }
    return status
  }

  updateStateOfTabs(){

    if (this.productSelected == this.starterSetSize ) {
      //so go to the next step  
      this.currentStep=2
      for(let i=0 ; i<2 ; i++){
        this.tabItem[i].classList.remove('disabled')
        this.tabItem[i].classList.add('active')
      }
      //update the visibilite of tabs
      this.tabPanels.forEach(tab=>{
        if(tab.getAttribute('js-tab-panel')==='list-products'){
          tab.classList.remove('active-panel')
        }
        else if(tab.getAttribute('js-tab-panel')==='list-gifts'){
          tab.classList.add('active-panel')
        }
      })
      this.scrollIntoView({ behavior: 'smooth' });
    }
  }

  addToSet(e){
    //add product to the line items
    const variant=e.detail.variant
    const isGift=e.detail.isGift.toLowerCase() === "true"
    this.lineItems.items.push(variant)
    //add product to the data set
    for (let lineItem of this.starterSetItems) {
      if(lineItem.getAttribute('js-starter-set-item') === "" &&  parseInt(lineItem.getAttribute('data-set-index')) != -1 && !isGift){
        //add product to the budnle
        lineItem.classList.add('selected')
        lineItem.setAttribute('js-starter-set-item',variant.id)
        this.productSelected++;
        this.updateLineItem(lineItem,variant,isGift)

        //update cart price
        this.updateCartValues(variant,isGift)
        //update state of tabs
        this.updateStateOfTabs()
        break;
      }
      else if(lineItem.getAttribute('js-starter-set-item') === "" &&  parseInt(lineItem.getAttribute('data-set-index')) == -1 && isGift){
        //add product to the budnle
        lineItem.classList.add('selected')
        lineItem.setAttribute('js-starter-set-item',variant.id)
        this.updateLineItem(lineItem,variant,isGift)
        //update cart price
        this.updateCartValues(variant,isGift)
        this.selectedGift=variant;
        break;
      }
    }
  }
}

customElements.define("product-bundler", ProductBundler);